---
Parameters:
  # SecurityGroupDescription:
  #   Description: Security Group Description
  #   Type: String
  # VPCId:
  #   Description: VPC to create the security group into
  #   Type: AWS::EC2::VPC::Id  
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'
  GitCloneLink:
    Description: Provide the clone link for your version controlled repository
    Type: String    
    MinLength: 1
  RepoName:
    Description: Provide the exact name of your repository
    Type: String    
    MinLength: 1
          

Resources: 
  TestServer:
    Type: AWS::EC2::Instance
    Properties: 
      AvailabilityZone: us-east-1a
      ImageId: !Ref LatestAmiId
      InstanceType: t2.micro
      KeyName: EC2_Tutorial       
      SecurityGroups:
        - !Ref SSHSecurityGroup
        - !Ref ServerSecurityGroup      
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo su
          sudo yum install -y nodejs
          sudo yum install -y nginx
          sudo yum install -y git
          sudo systemctl enable nginx
          systemctl status nginx
          cd /usr/share/nginx/html
          git clone ${GitCloneLink}
          cd ${RepoName}
          npm install
          npm run build
          cd /etc/nginx/

          sudo su
          rm -f nginx.conf 

          sudo echo "user nginx;
          worker_processes auto;
          error_log /var/log/nginx/error.log notice;
          pid /run/nginx.pid;

          # Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
          include /usr/share/nginx/modules/*.conf;

          events {
            worker_connections 1024;
          }

          http {
            log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

            access_log  /var/log/nginx/access.log  main;

            sendfile            on;
            tcp_nopush          on;
            keepalive_timeout   65;
            types_hash_max_size 4096;

            include             /etc/nginx/mime.types;
            default_type        application/octet-stream;
            include /etc/nginx/conf.d/*.conf;

            server {
              listen       80;
              listen       [::]:80;
              server_name  _;
              root         /usr/share/nginx/html/${RepoName}/build;

              # Load configuration files for the default server block.
              include /etc/nginx/default.d/*.conf;

              error_page 404 /404.html;
              location = /404.html {
              }

              error_page 500 502 503 504 /50x.html;
              location = /50x.html {
              }
            }
          }   " >> nginx.conf


          sudo service nginx restart

  # First EC2 security group
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - CidrIp: 0.0.0.0/0
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
    
    # Second EC2 security group    
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MainServerSecurityGroup
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 192.168.1.1/32  
      
      
             


















